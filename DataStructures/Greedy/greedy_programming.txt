A greedy algorithm constructs a solution to the problem by always making a
choice that looks the best at the moment. A greedy algorithm never takes back
its choices, but directly constructs the final solution. For this reason, greedy
algorithms are usually very efficient but may not get optimal solution.

The difficulty in designing greedy algorithms is to find a greedy strategy that
always produces an optimal solution to the problem. The locally optimal choices
in a greedy algorithm should also be globally optimal. 

Example, taking a turn at a traffic light on a congested road to a highway.
Take a path that is not congested to enter highway -> greedy decision
Efficient and easy to make a locally greedy decision.
But it may not be optiomal, since not taking a highway, may take a long time
with internal roads.

So when to choose greedy ?
- when a globally optimum choice can be arrived at by selecting locally optimum choice
- optimal substructure : optimum solution to a problem contains optimum solution to subproblems

Greedy algo does not take the choices back. Hence may be faster but does not guarantee optimal solution.
OTOH, DP (dynamic programming) does. Hence DP is slower but always finds optimal soltuion.

