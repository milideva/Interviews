
f(x) = O(upperbound) means f "grows no faster than" upperbound

f(x) = theta(justlikethis) mean f "grows exactly like" justlikethis

f(x) = omega(lowerbound) means f "grows no slower than" lowerbound


The Big Oh notation groups functions into a set of classes, such that all the
functions in a particular class are equivalent with respect to the Big
Oh. Functions f(n) = 0.34n and g(n) = 234,234n belong in the same class,
namely those that are theta(n).

Constant functions, f(n) = 1 Such functions might measure the cost of adding
two numbers, or the growth realized by functions such as f(n) = min(n, 100). In
the big picture, there is no dependence on the parameter n.

Logarithmic functions, f(n) = log n Logarithmic time-complexity shows up in
algorithms such as binary search. Such functions grow quite slowly as n gets
big, but faster than the constant function

Explain log n in layman's terms :
log n : divide n by base 2 as many times it takes to get down to 1.
log 1024 : divide by 2 ten times. 
log n curve that becomes very flat as n grows.

Linear functions, f(n) = n Such functions measure the cost of looking at each
item once (or twice, or 32 times etc) in an n-element array, say to identify
the biggest item, the smallest item, or compute the average value

Superlinear functions, f(n) = n lg n This important class of functions arises
in such algorithms as Quicksort and Mergesort. They grow just a little faster
than linear.


Quadratic functions, f(n) = n^2 Such functions measure the cost of looking at
most or all pairs of items in an n-element universe. This arises in algorithms
such as insertion sort and selection sort.

Cubic functions, f(n) = n^3 Such functions enumerate through all triples of
items in an n-element universe. These also arise in certain dynamic programming
algorithms

Exponential functions, f(n) = c^n for a given constant c > 1 Functions like 2^n
arise when enumerating all subsets of n items. As we have seen, exponential
algorithms become useless fast, but not as fast as factorial.

Factorial functions, f(n) = n! Functions like n! arise when generating all
permutations or orderings of n items.
example traveling salesman 

n! >> 2^n >>  n^3 >> n^2 >> n log n >> n >> log n >> 1

http://stackoverflow.com/questions/487258/plain-english-explanation-of-big-o

Polynomial time and exponential time:

O(n^2) is quadratic category, which is a type of polynomial (the special case
of the exponent being equal to 2).  On the other hand, O(2^n) is exponential
time, where the exponential function implied is f(n) = 2^n. The difference is
whether the function of n places n in the base of an exponentiation, or in the
exponent itself.

A polynomial is a linear combination of terms that look like Constant * n^k On
the opposite, exponential means something like k^n, where in both case k is a
constant and n is a variable.

Exponential algorithms execution time grows much faster than that of polynomial
ones.

Worst of the lot are the factorial algorithms.


