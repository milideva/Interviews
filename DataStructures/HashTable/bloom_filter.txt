http://billmill.org/bloomfilter-tutorial/

A Bloom filter is a data structure designed to tell you, rapidly and 
memory-efficiently, whether an element is present in a set.

It tells "definitely not" (with no error) or "probably yes" (with
probability x of being wrong)

The price paid for this efficiency is that a Bloom filter is a 
probabilistic data structure: it tells us that the element either 
definitely is not in the set or may be in the set.

The base data structure of a Bloom filter is a Bit Vector. 
k hash function generate k numbers.
each numbered bit is set in bit vector (so k bits get set).

Hash Functions

The hash functions used in a Bloom filter should be independent and 
uniformly distributed. They should also be as fast as possible 
(cryptographic hashes such as sha1, though widely used therefore are not 
very good choices).

Examples of fast, simple hashes that are independent enough3 include 
murmur, the fnv series of hashes, and Jenkins Hashes. 

The more hash functions you have, the slower your bloom filter, and the 
quicker it fills up. If you have too few, however, you may suffer too many 
false positives. 

Removing an item is impossible.

You can squeeze a full dictionary into a bloom filter with about 512k.

To support delete, use a counter instead of a bit.

Standard Bloom filters allow a tunable false positive rate x so that a query
returns either "definitely not" (with no error) or "probably yes" (with
probability x of being wrong). The lower x is, the more space the filter
requires. 

An empty Bloom filter is a bit array with all bits set to 0, and associates
each item with k hash functions. To add an item, it hashes this item to k
positions in the bit array, and then sets all k bits to 1. Lookup is processed
similarly, except it reads k corresponding bits in the array: if all the bits
are set, the query returns positive; otherwise it returns negative.

Bloom filters do not support deletion, thus removing even a single item
requires rebuilding the entire filter.  

Counting Bloom filters support delete operations by extending the bit array to
a counter array. An insert then increments the value of k counters instead of
simply setting k bits, and lookup checks whether each of the required counters
is non-zero. The delete operation decrements the values of the k counters. In
practice the counter usually consists of four or more bits, and a counting
Bloom filter therefore requires four times more space than a standard Bloom
filter.

Google BigTable and Apache Cassandra use Bloom filters to reduce the disk
lookups for non-existent rows or columns. Avoiding costly disk lookups
considerably increases the performance of a database query operation.[7]

Bloom filter calculator 
inputs: n #of items, p probability of false positives, k #hash functions
output: m #bits in the filter (size of the bloom filter)
https://hur.st/bloomfilter/?n=40M&p=1.0E-7&m=&k=8

More hash functions, smaller the size required.

Note
If  Bloom filter is 128MiB, on older hardware it may not fit into L3 cache! 
The hashes are uniformly distributed across the large memory range - each hash generates a memory miss!
This will severely impact performance.

Latency numbers every programmer should know (latest based on Jeff Dean's work in 2011)
https://colin-scott.github.io/personal_website/research/interactive_latency.html

When Bloom filters don't bloom
https://blog.cloudflare.com/when-bloom-filters-dont-bloom
