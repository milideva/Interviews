
http://stackoverflow.com/questions/757059/position-of-least-significant-bit-that-is-set


1.

ffs - find first bit set in a word

ffs(3) - Linux man page


2.  find the lowest-byte and then use that byte in a 256-entry lookup
 table. This gives you a worst-case performance of four conditional
 instructions and a best-case of 1. Not only is this the least amount of
 instructions, but the least amount of branches which is super-important on
 modern hardware.

table (256 8-bit entries) should contain the index of the LSB for each number
in the range 0-255. You check each byte of your value and find the lowest
non-zero byte, then use this value to lookup the real index.

This does require 256-bytes of memory.
byte lowestBitTable[256] = {
.... // left as an exercise for the reader to generate
};

unsigned GetLowestBitPos(unsigned value)
{
  // note that order to check indices will depend whether you are on a big 
  // or little endian machine. This is for little-endian
  byte* bytes = (byte*)value;
  if (bytes[0])
    return lowestBitTable[bytes[0]];
  else if (bytes[1])
      return lowestBitTable[bytes[1]] + 8;
  else if (bytes[2])
      return lowestBitTable[bytes[2]] + 16;
  else
      return lowestBitTable[bytes[3]] + 24;  
}


3.

Anytime you have a branch, the CPU has to guess which branch will be taken. The
instruction pipe is loaded with the instructions that lead down the guessed
path. If the CPU has guessed wrong then the instruction pipe gets flushed, and
the other branch must be loaded.


Lets consider what happens when you look up a value in a table. Chances are the
value is not currently in cache, at least not the first time your function is
called. This means that the CPU gets stalled while the value is loaded from
cache.

int BitScanLow_BranchFree(ui value)
{
    int i16 = !(value & 0xffff) << 4;
    value >>= i16;

    int i8 = !(value & 0xff) << 3;
    value >>= i8;

    int i4 = !(value & 0xf) << 2;
    value >>= i4;

    int i2 = !(value & 0x3) << 1;
    value >>= i2;

    int i1 = !(value & 0x1);

    int i0 = (value >> i1) & 1? 0 : -32;

    return i16 + i8 + i4 + i2 + i1 + i0;
}



For GCC use __builtin_ffs, __builtin_clz, __builtin_ctz.

Built-in Function: int __builtin_ffs (int x)

Returns one plus the index of the least significant 1-bit of x, or if x is
zero, returns zero.

Built-in Function: int __builtin_clz (unsigned int x)

Returns the number of leading 0-bits in x, starting at the most significant bit
position. If x is 0, the result is undefined.

Built-in Function: int __builtin_ctz (unsigned int x)

Returns the number of trailing 0-bits in x, starting at the least significant
bit position. If x is 0, the result is undefined.

